from glob import glob
import os

configfile:'config.yaml'

resolution=config['resolution']
sample = [os.path.basename(i).split('_R1')[0] for i in glob('raw_data/*_R1.fq.gz')]


# onsuccess:
#     shell("send.py log -l {log}")

# onerror:
#     shell("send.py log -l {log} --return_code 1")

rule all:
    input:
        expand('cool_files/{SAMPLE}.resolution_{RESOLUTION}.mcool', SAMPLE=sample, RESOLUTION=resolution)


rule run_bwa:
    input:
        fastq1='raw_data/{sample}_R1.fq.gz',
        fastq2='raw_data/{sample}_R2.fq.gz',
    output: 
        'aligned_data/{sample}.bam'
    threads: 30
    params:
        ref=config['bwa_index']
    shell:
        'bwa mem -SP5M -t {threads} {params.ref} {input.fastq1} {input.fastq2} | samtools view -@ {threads} -b > {output}'


rule pair_parse:
    input: 
        bam='aligned_data/{sample}.bam',
    output:
        temp("pairs_files/{sample}.pairs")
    params:
        genomesize=config['genomesize'],
        mapq=config['mapq']
    conda: 'hic'
    threads: 32
    shell:
        """
pairtools parse --nproc-in {threads} --nproc-out {threads} --min-mapq {params.mapq} --drop-sam --drop-seq -c {params.genomesize} -o {output} {input.bam}
        """        


rule pair_sort:
    input:
        'pairs_files/{sample}.pairs'
    output:
        temp('pairs_files/{sample}.sorted.pairs')
    threads: 32
    conda: 'hic'
    shell:
        """
pairtools sort --nproc-in {threads} --nproc-out {threads} --memory 96G --tmpdir ./ -o {output} {input} 
        """


#this step only keep UU UR RU 
rule pair_dropdu: 
    input:
        'pairs_files/{sample}.sorted.pairs'
    output:
        nodups_pairs='pairs_files/{sample}.nodups.pairs.gz',
        nodups_bam='aligned_data/{sample}.nodups.bam',
        unmapped_pairs='pairs_files/{sample}.unmapped.pairs.gz',
        unmapped_bam='aligned_data/{sample}.unmapped.bam',
        dups_pairs='pairs_files/{sample}.dups.pairs.gz',
        dups_bam='aligned_data/{sample}.dups.bam',
        stats='stats/{sample}.dedup.stats'
    conda: 'hic'
    threads: 32
    shell:
        """
pairtools dedup --n-proc {threads} --nproc-in {threads} --nproc-out {threads} \
    --output \
        >( pairtools split \
            --output-pairs {output.nodups_pairs} \
            --output-sam {output.nodups_bam} \
         ) \
    --output-unmapped \
        >( pairtools split \
            --output-pairs {output.unmapped_pairs} \
            --output-sam {output.unmapped_bam} \
         ) \
    --output-dups \
        >( pairtools split \
            --output-pairs {output.dups_pairs} \
            --output-sam {output.dups_bam} \
         ) \
    --output-stats {output.stats} \
    {input}
        """


rule pairix:
    input:
        "pairs_files/{sample}.nodups.pairs.gz"
    output:
        "pairs_files/{sample}.nodups.pairs.gz.px2"
    conda: 'hic'
    shell:
        """
pairix -f -p pairs {input}
        """

        
rule cooler:
    output:
        "cool_files/{sample}.resolution_{RESOLUTION}.cool"
    input:
        pairsam = "pairs_files/{sample}.nodups.pairs.gz",
        px = "pairs_files/{sample}.nodups.pairs.gz.px2"
    params:
        chromsize = config['genomesize'],
        resulation = lambda wildcard: wildcard.RESOLUTION
    conda: 'hic'
    shell:
        "cooler cload pairix {params.chromsize}:{params.resulation} {input.pairsam} {output}"


rule balance:
    output:
        "cool_files/{sample}.resolution_{RESOLUTION}.mcool"
    input:
        "cool_files/{sample}.resolution_{RESOLUTION}.cool"
    params:
        mcool_resulation = config['mcool_resulation']  # for cooler zoomify 
    threads: 16
    conda: 'hic'
    shell:
        "cooler zoomify --nproc {threads} -r {params.mcool_resulation} --balance -o {output} {input}"
